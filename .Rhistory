library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
library(mypackage )
usePackage <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
library(MASS)
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
```{r stuff}
tab1 <- datatable(as.data.frame(iris))
print(tab1)
r <- getOption("repos")
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
# Helper function to install a package if not installed and load
use_package <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
# Base R packages: (no need to check if installed)
library(MASS)
# Non-base packages
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('pairsD3') ## A D3 pairs plot
use_package('DT')
use_package('rAmCharts')
use_package('threejs')
use_package('ggiraph')
use_package('DiagrammeR')
use_package('devtools')
# Non-maintained packages
# printr
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
library(printr)
knitr::opts_chunk$set(cache = TRUE,  # Automatic cache for quick compiles
echo = FALSE,              # Only print R code if you must
out.width='80%',           # Reasonable plot width
fig.height=4,              # Reasonable plot height
fig.align = 'center',      # Center plots
fig.pos = "!htbp")         # Float priority: here, top, bottom, page
knit_hooks$set(htmlcap = function(before, options, envir) {
if(!before) {
paste('<p class="caption">',options$htmlcap,"</p>",sep="")
}
})
tab1 <- datatable(as.data.frame(iris))
print(tab1)
print(tab1)
tab1
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "<b>Table 1</b>: A descriptive caption"),
type = "html",
html.table.attributes = getOption("xtable.html.table.attributes",
paste("align =\"center\"
border=0 cellpadding=\"3\"
id=\"test1\"")),
include.rownames = FALSE
)
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "<b>Table 1</b>: A descriptive caption"),
type = "html",
html.table.attributes = getOption("xtable.html.table.attributes",
paste("align =\"center\"
border=0 cellpadding=\"3\"
id=\"test1\"")),
include.rownames = FALSE
)
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "<b>Table 1</b>: Descriptive statistics"),
type = "html",
html.table.attributes = getOption("xtable.html.table.attributes",
paste("align =\"center\"
border=0 cellpadding=\"3\"
id=\"test1\"")),
include.rownames = FALSE
)
stargazer(iris, float = FALSE, iqr = TRUE, type = "html")
stargazer(iris, float = FALSE, iqr = TRUE, type = "html", caption = "cap here")
stargazer(iris, float = FALSE, iqr = TRUE, type = "html", caption = "cap here")i
?stargazer
stargazer
stargazer(iris, float = FALSE, iqr = TRUE, type = "html", dep.var.caption = "cap")
r <- getOption("repos")
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
# Helper function to install a package if not installed and load
use_package <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
# Base R packages: (no need to check if installed)
library(MASS)
# Non-base packages
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('pairsD3') ## A D3 pairs plot
use_package('DT')
use_package('rAmCharts')
use_package('threejs')
use_package('ggiraph')
use_package('DiagrammeR')
use_package('rCharts')
use_package('devtools')
# Non-maintained packages
# printr
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
library(printr)
knitr::opts_chunk$set(cache = TRUE,  # Automatic cache for quick compiles
echo = FALSE,              # Only print R code if you must
out.width='80%',           # Reasonable plot width
fig.height=4,              # Reasonable plot height
fig.align = 'center',      # Center plots
fig.pos = "!htbp")         # Float priority: here, top, bottom, page
data(iris)
pander(head(iris))
par(mar = c(3,4,2,2))
boxplot(iris[,1:4])
par(mfrow = c(2,2))
beanplot(Sepal.Length ~ Species, data = iris, ylab = "Sepal Length", xlab = "Species", col = "beige", method = "jitter")
beanplot(Sepal.Width ~ Species, data = iris, ylab = "Sepal Width", xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Length ~ Species, data = iris, ylab = "Petal Length", xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Width ~ Species, data = iris, ylab = "Petal Width", xlab = "Species", col = "beige", method = "jitter")
names(iris) = gsub("\\.", "", names(iris))
p1 <- rPlot("SepalWidth", "SepalLength", data = iris, color = "Species", type = 'point')
p1$addParams(dom = 'myChart')
p1$set(pointSize = 0, lineWidth = 3,width=600, height=600)
p1$print('chart2', include_assets = TRUE)
data(iris)
?pander
use_package <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
# Base R packages: (no need to check if installed)
library(MASS)
# Non-base packages
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('knitr') ## To define htmlcap below (and more?)
use_package('devtools')
# Non-maintained packages
# printr
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
library(printr)
?pander
pander(head(iris))
pander(summary(iris))
install.packages("jpeg")
use_package('grid')
use_package('gridExtra')
kable(iris[1:7,])
devtools::load_all(".")
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
include.rownames = FALSE
)
r <- getOption("repos")
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
# Helper function to install a package if not installed and load
use_package <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
# Base R packages: (no need to check if installed)
library(MASS)
# Non-base packages
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('devtools')
# Non-maintained packages
# printr
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
library(printr)
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
include.rownames = FALSE
)
library(mypackage )
library(mypackage )
test <- system.file("latex", "example_report.rnw", package = "mypackage")
test
print(test)
read.file(test)
?read.file
read.text(test)
install.packages("readr")
readLines(test)
readLines(test, collapse = "\n")
paste(readLines(test), collapse = "\n")
return(paste(readLines(test), collapse = "\n"))
paste(readLines(test), collapse = "\n"))
mystring <- read_file(test)
library(readr)
mystring <- read_file(test)
mystring
paste(readLines(test), collapse = "\n"))
paste(readLines(test), collapse = "\n")
?writeLines
create_report <- function(){
fileConn<-file("example_report.rnw")
writeLines(paste(readLines(test), collapse = "\n"), fileConn)
close(fileConn)
}
setwd("/mnt/mydata/Programming/R/maintained/mypackage/test")
create_report()
create_report <- function(){
report <- system.file("latex", "example_report.rnw", package = "mypackage")
bibliography <- system.file("latex", "bibliography.bib", package = "mypackage")
rnw<-file("example_report.rnw")
writeLines(paste(readLines(report), collapse = "\n"), rnw)
close(rnw)
bib<-file("bibliography.bib")
writeLines(paste(readLines(bibliography), collapse = "\n"), bib)
close(rnw)
}
create_report()
name1 <- "example_report"
paste(name1, ".rnw")
paste(name1, ".rnw", sep = "")
create_report <- function(name = "example_report"){
report <- system.file("latex", "example_report.rnw", package = "mypackage")
bibliography <- system.file("latex", "bibliography.bib", package = "mypackage")
rnw<-file(paste(name, ".rnw", sep = ""))
writeLines(paste(readLines(report), collapse = "\n"), rnw)
close(rnw)
bib<-file("bibliography.bib")
writeLines(paste(readLines(bibliography), collapse = "\n"), bib)
close(rnw)
}
create_report("example_report2")
library(mypackage )
setwd("/mnt/mydata/Programming/R/maintained/mypackage/test")
View(create_report)
create_report("test_report")
library(mypackage )
vignette(package = "mypackage")
vignette(intro, package = "mypackage")
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
library(mypackage )
library(mypackage )
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
library(mypackage )
vignette(mypackage)
vignette('mypackage')
vignette(package = 'mypackage')
vignette('style_guide', package = 'mypackage')
library(mypackage )
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
lm1 <- lm(Sepal.Legth ~ Sepal.Width * Species, data = iris)
library(mypackage )
lm1 <- lm(Sepal.Length ~ Sepal.Width * Species, data = iris)
data(iris)
head(iris)
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
type = "html",
html.table.attributes = getOption("xtable.html.table.attributes",
paste("align =\"center\"
border=0 cellpadding=\"3\"
id=\"test1\"")),
include.rownames = FALSE
)
r <- getOption("repos")
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
use_package <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
library(MASS)
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('pairsD3') ## A D3 pairs plot
use_package('DT')
use_package('rAmCharts')
use_package('ggiraph')
use_package('DiagrammeR')
use_package('DiagrammeR')
use_package('rCharts')
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
type = "html",
html.table.attributes = getOption("xtable.html.table.attributes",
paste("align =\"center\"
border=0 cellpadding=\"3\"
id=\"test1\"")),
include.rownames = FALSE
)
stargazer(iris, float = FALSE, iqr = TRUE, type = "html")
par(mar = c(3,4,2,2))
boxplot(iris[,1:4])
par(mfrow = c(2,2))
beanplot(Sepal.Length ~ Species, data = iris, ylab = "Sepal Length", xlab = "Species", col = "beige", method = "jitter")
beanplot(Sepal.Width ~ Species, data = iris, ylab = "Sepal Width", xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Length ~ Species, data = iris, ylab = "Petal Length", xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Width ~ Species, data = iris, ylab = "Petal Width", xlab = "Species", col = "beige", method = "jitter")
names(iris) = gsub("\\.", "", names(iris))
p1 <- rPlot("SepalWidth", "SepalLength", data = iris, color = "Species", type = 'point')
p1$addParams(dom = 'myChart')
p1$set(pointSize = 0, lineWidth = 3,width=600, height=600)
p1$print('chart2', include_assets = TRUE)
lm1 <- lm(Sepal.Length ~ Sepal.Width * Species, data = iris)
library(mypackage )
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
library(mypackage )
mat_mult
A <- matrix(rnorm(10000), 100, 100)
B <- matrix(rnorm(10000), 100, 100)
system.time(AB <- mat_mult(A,B))
system.time(AB <- mat_mult_c(A,B))
system.time(AB <- mat_mult_f(A,B))
A <- matrix(rnorm(40000), 200, 200)
B <- matrix(rnorm(40000), 200, 200)
system.time(AB <- mat_mult(A,B))
system.time(AB <- mat_mult_c(A,B))
system.time(AB <- mat_mult_f(A,B))
vignette(package = "mypackage")
vignette(package = "mypackage")
vignette('style_guide', package = "mypackage")
tuning <- 3.1
targs <- list(8)
names(targs) <- "lambda"
jsarg <- list(tuning, 8)
names(jsarg) <- c("size", "mu")
jdarg1 <- list(tuning, 8)
names(jdarg1) <- c("size", "mu")
jdarg2 <- list(tuning, 8)
names(jdarg2) <- c("size", "mu")
mhast1 <- m_hast(n.iter = 10000, theta.start = 8, t.fun = "dpois", t.arg = list(8),
j.s.fun = "rnbinom", j.s.arg = jsarg, j.d.fun = "dnbinom",
j.d.arg1 = jdarg1, j.d.arg2 = jdarg2, center = "mu")
mhast1$efficiency
plot(as.numeric(names(table(mhast1$theta))), as.numeric(table(mhast1$theta)/10000), type = "h", xlim = c(0, 23))
points(as.numeric(names(table(mhast1$theta))), as.numeric(table(mhast1$theta)/10000),
col = "#2ca25f", pch = 20, cex = 1 )
points(1:23, dpois(1:23, 8), pch = 3)
mhast
m_hast
y.vec <- c(23,24,25,26.5,27.5)
c.l.met.func <- cmpfun(l.met.func)
l.post <- function(thetas, y = y_vec){
return(- sum(log(1 + (y - thetas)^2)) - ((thetas - 20)^2)/10)
}
library("compiler", lib.loc="/usr/lib/R/library")
c.l.met.func <- cmpfun(l.met.func)
c.l.met.func <- cmpfun(l_met)
l.post <- function(thetas, y = y_vec){
return(- sum(log(1 + (y - thetas)^2)) - ((thetas - 20)^2)/10)
}
unif.j <- function(curr, a){
runif(1, curr - a, curr + a)
}
norm.j <- function(curr, a){
rnorm(1, curr, a)
}
u.met <- c.l.met.func(n.iter = 1000000, theta.start = mean(y.vec),  "l.post",
t.fun.arg = list(y.vec), "unif.j", j.fun.arg = list(2.4))
u.met$efficiency
hist(u.met$theta.vec, breaks = 100, main = "Posterior Using Uniform Jumping Distribution")
n.met <- c.l.met.func(n.iter = 1000000, theta.start = mean(y.vec),  "l.post",
t.fun.arg = list(y.vec), "norm.j", j.fun.arg = list(1.57))
n.met$efficiency
hist(n.met$theta.vec, breaks = 100, main = "Posterior Using Normal Jumping Distribution")
