options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('knitr') ## To define htmlcap below (and more?)
use_package('devtools')
# Non-maintained packages
# printr
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
library(printr)
?pander
pander(head(iris))
pander(summary(iris))
install.packages("jpeg")
use_package('grid')
use_package('gridExtra')
kable(iris[1:7,])
devtools::load_all(".")
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
include.rownames = FALSE
)
r <- getOption("repos")
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
# Helper function to install a package if not installed and load
use_package <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
# Base R packages: (no need to check if installed)
library(MASS)
# Non-base packages
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('devtools')
# Non-maintained packages
# printr
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
library(printr)
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
include.rownames = FALSE
)
library(mypackage )
library(mypackage )
test <- system.file("latex", "example_report.rnw", package = "mypackage")
test
print(test)
read.file(test)
?read.file
read.text(test)
install.packages("readr")
readLines(test)
readLines(test, collapse = "\n")
paste(readLines(test), collapse = "\n")
return(paste(readLines(test), collapse = "\n"))
paste(readLines(test), collapse = "\n"))
mystring <- read_file(test)
library(readr)
mystring <- read_file(test)
mystring
paste(readLines(test), collapse = "\n"))
paste(readLines(test), collapse = "\n")
?writeLines
create_report <- function(){
fileConn<-file("example_report.rnw")
writeLines(paste(readLines(test), collapse = "\n"), fileConn)
close(fileConn)
}
setwd("/mnt/mydata/Programming/R/maintained/mypackage/test")
create_report()
create_report <- function(){
report <- system.file("latex", "example_report.rnw", package = "mypackage")
bibliography <- system.file("latex", "bibliography.bib", package = "mypackage")
rnw<-file("example_report.rnw")
writeLines(paste(readLines(report), collapse = "\n"), rnw)
close(rnw)
bib<-file("bibliography.bib")
writeLines(paste(readLines(bibliography), collapse = "\n"), bib)
close(rnw)
}
create_report()
name1 <- "example_report"
paste(name1, ".rnw")
paste(name1, ".rnw", sep = "")
create_report <- function(name = "example_report"){
report <- system.file("latex", "example_report.rnw", package = "mypackage")
bibliography <- system.file("latex", "bibliography.bib", package = "mypackage")
rnw<-file(paste(name, ".rnw", sep = ""))
writeLines(paste(readLines(report), collapse = "\n"), rnw)
close(rnw)
bib<-file("bibliography.bib")
writeLines(paste(readLines(bibliography), collapse = "\n"), bib)
close(rnw)
}
create_report("example_report2")
library(mypackage )
setwd("/mnt/mydata/Programming/R/maintained/mypackage/test")
View(create_report)
create_report("test_report")
library(mypackage )
vignette(package = "mypackage")
vignette(intro, package = "mypackage")
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
library(mypackage )
library(mypackage )
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
library(mypackage )
vignette('intro', package = "mypackage")
library(mypackage )
vignette(mypackage)
vignette('mypackage')
vignette(package = 'mypackage')
vignette('style_guide', package = 'mypackage')
library(mypackage )
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
vignette('style_guide', package = 'mypackage')
lm1 <- lm(Sepal.Legth ~ Sepal.Width * Species, data = iris)
library(mypackage )
lm1 <- lm(Sepal.Length ~ Sepal.Width * Species, data = iris)
data(iris)
head(iris)
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
type = "html",
html.table.attributes = getOption("xtable.html.table.attributes",
paste("align =\"center\"
border=0 cellpadding=\"3\"
id=\"test1\"")),
include.rownames = FALSE
)
r <- getOption("repos")
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
use_package <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
library(p, character.only = TRUE)
}
library(MASS)
use_package('xtable')  ## For printing tables
options(xtable.comment = FALSE)
use_package('stargazer') ## For printing summary data and anova tables
use_package('psych') ## Pairs Plot (consider ggpairs in GGally)
use_package('beanplot') ## For beanplots (AKA violin plots)
use_package('car') ## Some nice diagnostic plots?
use_package('car') ## Some nice diagnostic plots?
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('pander') ## Markdown tables
use_package('htmlTable') ## Create HTML tables
use_package('ggplot2') ## Good overall plotting library
use_package('plotly') ## interactive plots (meh)
use_package('GGally') ## ggplots extension (has ggpairs)
use_package('knitr') ## To define htmlcap below (and more?)
use_package('pairsD3') ## A D3 pairs plot
use_package('DT')
use_package('rAmCharts')
use_package('ggiraph')
use_package('DiagrammeR')
use_package('DiagrammeR')
use_package('rCharts')
if (!is.element('printr', installed.packages()[,1]))
install_github("yihui/printr")
print(xtable(iris[1:7,],
align = rep("center",6),
caption = "First 7 rows of the dataset"),
type = "html",
html.table.attributes = getOption("xtable.html.table.attributes",
paste("align =\"center\"
border=0 cellpadding=\"3\"
id=\"test1\"")),
include.rownames = FALSE
)
stargazer(iris, float = FALSE, iqr = TRUE, type = "html")
par(mar = c(3,4,2,2))
boxplot(iris[,1:4])
par(mfrow = c(2,2))
beanplot(Sepal.Length ~ Species, data = iris, ylab = "Sepal Length", xlab = "Species", col = "beige", method = "jitter")
beanplot(Sepal.Width ~ Species, data = iris, ylab = "Sepal Width", xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Length ~ Species, data = iris, ylab = "Petal Length", xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Width ~ Species, data = iris, ylab = "Petal Width", xlab = "Species", col = "beige", method = "jitter")
names(iris) = gsub("\\.", "", names(iris))
p1 <- rPlot("SepalWidth", "SepalLength", data = iris, color = "Species", type = 'point')
p1$addParams(dom = 'myChart')
p1$set(pointSize = 0, lineWidth = 3,width=600, height=600)
p1$print('chart2', include_assets = TRUE)
lm1 <- lm(Sepal.Length ~ Sepal.Width * Species, data = iris)
library(mypackage )
library(mypackage )
vignette('style_guide', package = 'mypackage')
library(mypackage )
library(mypackage )
mat_mult
A <- matrix(rnorm(10000), 100, 100)
B <- matrix(rnorm(10000), 100, 100)
system.time(AB <- mat_mult(A,B))
system.time(AB <- mat_mult_c(A,B))
system.time(AB <- mat_mult_f(A,B))
A <- matrix(rnorm(40000), 200, 200)
B <- matrix(rnorm(40000), 200, 200)
system.time(AB <- mat_mult(A,B))
system.time(AB <- mat_mult_c(A,B))
system.time(AB <- mat_mult_f(A,B))
vignette(package = "mypackage")
vignette(package = "mypackage")
vignette('style_guide', package = "mypackage")
tuning <- 3.1
targs <- list(8)
names(targs) <- "lambda"
jsarg <- list(tuning, 8)
names(jsarg) <- c("size", "mu")
jdarg1 <- list(tuning, 8)
names(jdarg1) <- c("size", "mu")
jdarg2 <- list(tuning, 8)
names(jdarg2) <- c("size", "mu")
mhast1 <- m_hast(n.iter = 10000, theta.start = 8, t.fun = "dpois", t.arg = list(8),
j.s.fun = "rnbinom", j.s.arg = jsarg, j.d.fun = "dnbinom",
j.d.arg1 = jdarg1, j.d.arg2 = jdarg2, center = "mu")
mhast1$efficiency
plot(as.numeric(names(table(mhast1$theta))), as.numeric(table(mhast1$theta)/10000), type = "h", xlim = c(0, 23))
points(as.numeric(names(table(mhast1$theta))), as.numeric(table(mhast1$theta)/10000),
col = "#2ca25f", pch = 20, cex = 1 )
points(1:23, dpois(1:23, 8), pch = 3)
mhast
m_hast
y.vec <- c(23,24,25,26.5,27.5)
c.l.met.func <- cmpfun(l.met.func)
l.post <- function(thetas, y = y_vec){
return(- sum(log(1 + (y - thetas)^2)) - ((thetas - 20)^2)/10)
}
library("compiler", lib.loc="/usr/lib/R/library")
c.l.met.func <- cmpfun(l.met.func)
c.l.met.func <- cmpfun(l_met)
l.post <- function(thetas, y = y_vec){
return(- sum(log(1 + (y - thetas)^2)) - ((thetas - 20)^2)/10)
}
unif.j <- function(curr, a){
runif(1, curr - a, curr + a)
}
norm.j <- function(curr, a){
rnorm(1, curr, a)
}
u.met <- c.l.met.func(n.iter = 1000000, theta.start = mean(y.vec),  "l.post",
t.fun.arg = list(y.vec), "unif.j", j.fun.arg = list(2.4))
u.met$efficiency
hist(u.met$theta.vec, breaks = 100, main = "Posterior Using Uniform Jumping Distribution")
n.met <- c.l.met.func(n.iter = 1000000, theta.start = mean(y.vec),  "l.post",
t.fun.arg = list(y.vec), "norm.j", j.fun.arg = list(1.57))
n.met$efficiency
hist(n.met$theta.vec, breaks = 100, main = "Posterior Using Normal Jumping Distribution")
library(mypackage )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
require(devtools)
require(printr)
require(knitr)
pander(session_info())
session_info()
print(xtable(anova(lm1),
align = rep("center",6),
caption = "A descriptive caption"),
include.rownames = TRUE
)
library(xtable)  ## For printing tables
library(stargazer) ## For printing summary data and anova tables
library(psych)
library(beanplot)
library(car)
library(car)
library(pander)
library(knitr)
library(htmlTable)
library(MASS)
print(xtable(anova(lm1),
align = rep("center",6),
caption = "A descriptive caption"),
include.rownames = TRUE
)
lm1 <- lm(Sepal.Length ~ Sepal.Width * Species, data = iris)
lm2 <- lm(Sepal.Length ~ Sepal.Width + Species, data = iris)
lm3 <- lm(Sepal.Length ~ Sepal.Width , data = iris)
lm4 <- lm(Sepal.Length ~ Species, data = iris)
print(xtable(anova(lm1),
align = rep("center",6),
caption = "A descriptive caption"),
include.rownames = TRUE
)
print(xtable(anova(lm1),
align = rep("center",6),
caption = "A descriptive caption"),
include.rownames = TRUE
)
print(xtable(anova(lm1),
caption = "A descriptive caption"),
include.rownames = TRUE
)
print(xtable(Anova(lm2, type = "II"),
caption = "A descriptive caption"),
include.rownames = TRUE
)
print(xtable(head(iris), caption = "First 6 lines of the dataset"))
library(MethodsOfDataAnalysis )
help(mean)
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
require(devtools)
require(knitr)
pander(session_info())
library(pander)
pander(session_info())
pander(session_info())
library(png)
library(grid)
library(gridExtra)
library(ggplot2)
fig1 <- rasterGrob(readPNG("images/iris_setosa.png"), interpolate=TRUE)
fig2 <- rasterGrob(readPNG("images/iris_virginica.png"), interpolate=TRUE)
grid.arrange(fig1, fig2, fig3, ncol=3)
fig3 <- rasterGrob(readPNG("images/iris_versicolor.png"), interpolate=TRUE)
grid.arrange(fig1, fig2, fig3, ncol=3)
iris_sub <- subset(iris, iris$Species == "setosa" |
iris$Species == "versicolor")
iris_sub$Species <- factor(iris_sub$Species)
head(iris_sub)
z <- lda(Species ~ Sepal.Width + Sepal.Length + Petal.Width +
Petal.Length, iris_sub, prior = c(1,1)/2)
preds <- predict(z)$class
z <- lda(Species ~ Sepal.Width + Sepal.Length + Petal.Width +
Petal.Length, iris_sub, prior = c(1,1)/2)
preds <- predict(z)$class
library(xtable)  ## For printing tables
library(stargazer) ## For printing summary data and anova tables
library(psych)
library(beanplot)
library(car)
library(car)
library(pander)
library(knitr)
library(htmlTable)
library(png)
library(grid)
library(gridExtra)
library(ggplot2)
iris_sub <- subset(iris, iris$Species == "setosa" |
iris$Species == "versicolor")
iris_sub$Species <- factor(iris_sub$Species)
head(iris_sub)
z <- lda(Species ~ Sepal.Width + Sepal.Length + Petal.Width +
Petal.Length, iris_sub, prior = c(1,1)/2)
install.packages("MASS")
iris_sub <- subset(iris, iris$Species == "setosa" |
iris$Species == "versicolor")
iris_sub$Species <- factor(iris_sub$Species)
head(iris_sub)
z <- lda(Species ~ Sepal.Width + Sepal.Length + Petal.Width +
Petal.Length, iris_sub, prior = c(1,1)/2)
preds <- predict(z)$class
library("MASS", lib.loc="/usr/lib/R/library")
z <- lda(Species ~ Sepal.Width + Sepal.Length + Petal.Width +
Petal.Length, iris_sub, prior = c(1,1)/2)
preds <- predict(z)$class
head(iris)
print(xtable(head(iris), caption = "First 6 lines of the dataset",
label = "data-head"),
comment = FALSE)
library(xtable)  ## For printing tables
library(stargazer) ## For printing summary data and anova tables
library(psych)
library(beanplot)
library(pander)
library(knitr)
library(htmlTable)
library(MASS)
library(png)
library(grid)
library(gridExtra)
library(ggplot2)
z <- lda(Species ~ Sepal.Width + Sepal.Length + Petal.Width +
Petal.Length, iris_sub, prior = c(1,1)/2)
head(iris)
print(xtable(head(iris), caption = "First 6 lines of the dataset",
label = "data-head"),
comment = FALSE)
summary(iris)
stargazer(iris, iqr = TRUE,
type = "latex", header = FALSE, label = "summary",
title = "Summary table of the four quantitative variables")
z$mean
print(xtable(z$mean, label = "means-tbl", caption = "Group means"),
comment = FALSE)
z$scaling
print(xtable(z$scaling, label = "scaling-tbl",
caption = "Coefficients of linear discriminants"),
comment = FALSE)
(1/z$scaling[1]) * z$scaling
print(xtable((1/z$scaling[1]) * z$scaling, label = "scaling-unity-tbl",
caption = "Coefficients of linear discriminants with first scaled to unity"),
comment = FALSE)
table(preds, iris_sub$Species)
print(xtable(table(preds, iris_sub$Species), label = "confusion",
caption = "Confusion matrix"),
comment = FALSE)
fig1 <- rasterGrob(readPNG("images/iris_setosa.png"), interpolate=TRUE)
fig2 <- rasterGrob(readPNG("images/iris_virginica.png"), interpolate=TRUE)
fig3 <- rasterGrob(readPNG("images/iris_versicolor.png"), interpolate=TRUE)
grid.arrange(fig1, fig2, fig3, ncol=3)
par(mar = c(5,4,4,3))
pairs.panels(iris[,1:4],
labels = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
bg=c("red",
"blue",
"green")[iris$Species],
pch=20+as.numeric(iris$Species),
ellipses = FALSE,
oma=c(4,4,6,12))
legend(.9*par("usr")[2],  ## 1.05 times x1 limit
.7*par("usr")[4],   ## .8 times y2 limit
levels(iris$Species),
pch = c(21,22,23),
pt.bg = c("red", "blue", "green"))
plot1 <- ggplot(iris, aes(x=Sepal.Length))
plot2 <- ggplot(iris, aes(x=Sepal.Width))
plot2<- plot2 + geom_histogram(aes(fill = Species))
plot3<- plot3 + geom_histogram(aes(fill = Species))
plot4 <- ggplot(iris, aes(x=Petal.Width))
m<-grid.arrange(plot1,plot2, plot3,plot4, ncol=2)
print(m)
plot3 <- ggplot(iris, aes(x=Petal.Length))
plot3<- plot3 + geom_histogram(aes(fill = Species))
plot4 <- ggplot(iris, aes(x=Petal.Width))
theme_set(theme_gray(base_size = 18))
m<-grid.arrange(plot1,plot2, plot3,plot4, ncol=2)
m<-grid.arrange(plot1,plot2, plot3,plot4, ncol=2)
print(m)
par(mfrow = c(2,2))
beanplot(Sepal.Length ~ Species, data = iris, ylab = "Sepal Length",
xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Length ~ Species, data = iris, ylab = "Petal Length",
xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Length ~ Species, data = iris, ylab = "Petal Length",
xlab = "Species", col = "beige", method = "jitter")
beanplot(Petal.Width ~ Species, data = iris, ylab = "Petal Width",
xlab = "Species", col = "beige", method = "jitter")
plot(z)
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
library(MethodsOfDataAnalysis )
